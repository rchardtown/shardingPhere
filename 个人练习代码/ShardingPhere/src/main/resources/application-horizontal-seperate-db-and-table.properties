# 配置数据源，给数据源起名称,
# 水平分库，配置两个数据源
spring.shardingsphere.datasource.names=m1,m2
#配置第一个数据源具体内容，包含连接池，驱动，地址，用户名和密码
spring.shardingsphere.datasource.m1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m1.url=jdbc:mysql://localhost:3306/edu_db_1?useUnicode=true&characterEncoding=utf8&autoReconnect=true&useSSL=false&allowMultiQueries=true&serverTimezone=Asia/Shanghai
spring.shardingsphere.datasource.m1.username=root
spring.shardingsphere.datasource.m1.password=
#配置第二个数据源具体内容，包含连接池，驱动，地址，用户名和密码
spring.shardingsphere.datasource.m2.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m2.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m2.url=jdbc:mysql://localhost:3306/edu_db_2?useUnicode=true&characterEncoding=utf8&autoReconnect=true&useSSL=false&allowMultiQueries=true&serverTimezone=Asia/Shanghai
spring.shardingsphere.datasource.m2.username=root
spring.shardingsphere.datasource.m2.password=
#指定数据库分布情况 &&  数据库里面表分布情况
# m1 m2 student_1 student_2
spring.shardingsphere.sharding.tables.student.actual-data-nodes=m$->{1..2}.student_$->{1..2}
# 指定 student 表里面主键 cid 生成策略 SNOWFLAKE
spring.shardingsphere.sharding.tables.student.key-generator.column=cid
spring.shardingsphere.sharding.tables.student.key-generator.type=SNOWFLAKE
# 所有数据库[库中的表有user_id字段就按这个规则分库]分片策略 约定 user_id 是偶数添加 m1，是奇数添加 m2
#spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=user_id
#spring.shardingsphere.sharding.default-database-strategy.inline.algorithm- expression=m$->{user_id % 2 + 1}
# 指定的数据库[规则为student的数据库]分片策略 约定 user_id 是偶数添加 m1，是奇数添加 m2
spring.shardingsphere.sharding.tables.student.database-strategy.inline..sharding-column=user_id
spring.shardingsphere.sharding.tables.student.database-strategy.inline.algorithm-expression=m$->{user_id % 2 + 1}
# 指定表分片策略 约定 cid 值偶数添加到 student_1 表，如果 cid 是奇数添加到student_2 表
spring.shardingsphere.sharding.tables.student.table-strategy.inline.sharding-column=cid
spring.shardingsphere.sharding.tables.student.table-strategy.inline.algorithm-expression=student_$->{cid % 2 + 1}

# 打开 sql 输出日志
spring.shardingsphere.props.sql.show=true
# 一个实体类对应两张表，覆盖
spring.main.allow-bean-definition-overriding=true