# shardingjdbc 分片策略
# 配置数据源，给数据源起名称,多个用  ，隔开
spring.shardingsphere.datasource.names=cui
# 一个实体类对应两张表，覆盖
#配置数据源具体内容，包含连接池，驱动，地址，用户名和密码

spring.shardingsphere.datasource.cui.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.cui.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.cui.url=jdbc:mysql://localhost:3306/course_db?useUnicode=true&characterEncoding=utf8&autoReconnect=true&useSSL=false&allowMultiQueries=true&serverTimezone=Asia/Shanghai
spring.shardingsphere.datasource.cui.username=root
pring.shardingsphere.datasource.cui.password=
#指定 course 表分布情况，配置表在哪个数据库里面，表名称都是什么 cui.course_1 ,cui.course_2    # course 这里指的表的规则  #cui 是给数据源起的名称
spring.shardingsphere.sharding.tables.course.actual-data-nodes=cui.course_$->{1..2}
# 指定 course 表里面主键：【这里是 cid】 生成策略，这里用雪花算法 SNOWFLAKE  # course 指的是表规则
spring.shardingsphere.sharding.tables.course.key-generator.column=cid
spring.shardingsphere.sharding.tables.course.key-generator.type=SNOWFLAKE
# 指定【表的】分片策略，这里约定 cid 值偶数添加到 course_1 表， cid 是奇数添加到 course_2表
spring.shardingsphere.sharding.tables.course.table-strategy.inline.sharding-column=cid
spring.shardingsphere.sharding.tables.course.table-strategy.inline.algorithm-expression=course_$->{cid % 2 + 1}
# 打开 sql 输出日志
spring.shardingsphere.props.sql.show=true

#允许一个实体类对应两张表
spring.main.allow-bean-definition-overriding=true